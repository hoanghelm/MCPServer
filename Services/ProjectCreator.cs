using System;
using System.IO;
using System.Threading.Tasks;
using CSharpLegacyMigrationMCP.Models;
using Microsoft.Extensions.Logging;

namespace CSharpLegacyMigrationMCP.Services
{
	public class ProjectCreator : IProjectCreator
	{
		private readonly ILogger<ProjectCreator> _logger;

		public ProjectCreator(ILogger<ProjectCreator> logger)
		{
			_logger = logger;
		}

		public async Task<(string dalPath, string balPath)> CreateProjectsAsync(string workspacePath, string projectName)
		{
			try
			{
				_logger.LogInformation($"Creating DAL and BAL projects for {projectName}");

				var dalProjectName = $"{projectName}.DAL";
				var balProjectName = $"{projectName}.BAL";

				var dalPath = Path.Combine(workspacePath, dalProjectName);
				var balPath = Path.Combine(workspacePath, balProjectName);

				// Create project directories
				Directory.CreateDirectory(dalPath);
				Directory.CreateDirectory(balPath);

				// Create folder structure for DAL
				CreateProjectStructure(dalPath, dalProjectName, "DataAccess");

				// Create folder structure for BAL
				CreateProjectStructure(balPath, balProjectName, "Business");

				// Create .csproj files
				await CreateProjectFileAsync(dalPath, dalProjectName, "DataAccess");
				await CreateProjectFileAsync(balPath, balProjectName, "Business");

				// Create initial interface folders
				Directory.CreateDirectory(Path.Combine(dalPath, "Interfaces"));
				Directory.CreateDirectory(Path.Combine(balPath, "Interfaces"));

				// Add reference from BAL to DAL
				await AddProjectReferenceAsync(balPath, balProjectName, dalPath, dalProjectName);

				_logger.LogInformation($"Successfully created projects at {dalPath} and {balPath}");

				return (dalPath, balPath);
			}
			catch (Exception ex)
			{
				_logger.LogError(ex, "Error creating projects");
				throw new MigrationException($"Failed to create projects: {ex.Message}", ex);
			}
		}

		private void CreateProjectStructure(string projectPath, string projectName, string projectType)
		{
			// Create standard folders
			var folders = new[]
			{
				"Models",
				"Interfaces",
				"Implementations",
				"Helpers",
				"Extensions"
			};

			foreach (var folder in folders)
			{
				Directory.CreateDirectory(Path.Combine(projectPath, folder));
			}

			// Add specific folders based on project type
			if (projectType == "DataAccess")
			{
				Directory.CreateDirectory(Path.Combine(projectPath, "Repositories"));
				Directory.CreateDirectory(Path.Combine(projectPath, "Entities"));
			}
			else if (projectType == "Business")
			{
				Directory.CreateDirectory(Path.Combine(projectPath, "Services"));
				Directory.CreateDirectory(Path.Combine(projectPath, "Validators"));
			}
		}

		private async Task CreateProjectFileAsync(string projectPath, string projectName, string projectType)
		{
			var csprojContent = $@"<Project Sdk=""Microsoft.NET.Sdk"">

  <PropertyGroup>
    <TargetFramework>net6.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <RootNamespace>{projectName}</RootNamespace>
    <AssemblyName>{projectName}</AssemblyName>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include=""Microsoft.Extensions.Logging.Abstractions"" Version=""6.0.0"" />
    <PackageReference Include=""Microsoft.Extensions.DependencyInjection.Abstractions"" Version=""6.0.0"" />
";

			if (projectType == "DataAccess")
			{
				csprojContent += @"    <PackageReference Include=""Npgsql"" Version=""7.0.6"" />
    <PackageReference Include=""Dapper"" Version=""2.0.123"" />
    <PackageReference Include=""Npgsql.EntityFrameworkCore.PostgreSQL"" Version=""7.0.11"" />
    <PackageReference Include=""Microsoft.EntityFrameworkCore"" Version=""7.0.14"" />
";
			}

			csprojContent += @"  </ItemGroup>

</Project>";

			var csprojPath = Path.Combine(projectPath, $"{projectName}.csproj");
			await File.WriteAllTextAsync(csprojPath, csprojContent);

			// Create initial README
			var readmeContent = $@"# {projectName}

This project was automatically generated by the WebForm Migration Tool.

## Project Type
{projectType} Layer

## Structure
- **Interfaces**: Contains all interface definitions
- **Implementations**: Contains implementation classes
- **Models**: Contains data models and DTOs
- **Helpers**: Contains helper classes and utilities
";

			if (projectType == "DataAccess")
			{
				readmeContent += @"- **Repositories**: Contains repository pattern implementations
- **Entities**: Contains database entity models
";
			}
			else
			{
				readmeContent += @"- **Services**: Contains business service implementations
- **Validators**: Contains business validation logic
";
			}

			await File.WriteAllTextAsync(Path.Combine(projectPath, "README.md"), readmeContent);
		}

		private async Task AddProjectReferenceAsync(string fromProjectPath, string fromProjectName,
			string toProjectPath, string toProjectName)
		{
			var csprojPath = Path.Combine(fromProjectPath, $"{fromProjectName}.csproj");
			var csprojContent = await File.ReadAllTextAsync(csprojPath);

			var relativePath = Path.GetRelativePath(fromProjectPath, Path.Combine(toProjectPath, $"{toProjectName}.csproj"));

			var referenceSection = $@"
  <ItemGroup>
    <ProjectReference Include=""{relativePath}"" />
  </ItemGroup>

</Project>";

			csprojContent = csprojContent.Replace("</Project>", referenceSection);
			await File.WriteAllTextAsync(csprojPath, csprojContent);
		}
	}
}